// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid         String   @id @default(uuid())
  id           Int      @default(autoincrement())
  username     String
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  labor Labor? @relation

  products Product[] @relation

  // recipes Recipe[] @relation

  //stockId String?
  //stock   Stock?   @relation(fields: [stockId], references: [uuid], onDelete: Cascade)

  @@map("users")
}

model Labor {
  uuid String @id @default(uuid())

  desiredSalary    Float
  workDaysPerMonth Int
  workHoursPerDay  Float

  electricity Float?
  water       Float?
  rent        Float?
  wage        Float?

  userId String @unique
  user   User   @relation(fields: [userId], references: [uuid], onDelete: Cascade)
}

enum Unit {
  g
  kg
  ml
  L
  un
}

model Product {
  uuid      String   @id @default(uuid())
  id        Int      @default(autoincrement())
  name      String
  quantity  Float 
  price     Float
  unit      Unit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)

  stockId String
  stock   Stock    @relation(fields: [stockId], references: [uuid], onDelete: Cascade)

  @@map("products")
}


model Stock{
  uuid     String   @id @default(uuid())
  id       Int      @default(autoincrement())
  name     String
  quantity Float
  unit     Unit
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  
  // userId String
  // user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)
  product Product[]

  @@map("stocks")
}

// model Recipe {
//   uuid      String   @id @default(uuid())
//   id        Int      @default(autoincrement())
//   name      String
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   userId String
//   user User @relation(fields: [userId], references: [uuid], onDelete: Cascade)

//   products Product[]

//   @@map("recipes")
// }



// model StockProduct{
//   uuid  String @id @default(uuid())
  
// }